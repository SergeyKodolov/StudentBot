from bot_config import BOT_TOKEN
from student_account import StudentAccount
from exceptions import IncorrectDataException

import keyboards as kb

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message


bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

users_chat_id: dict = {}


# –ö–æ–º–∞–Ω–¥–∞ "/start"
@dp.message(Command(commands=["start"]))
async def process_start_command(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç!\n–ú–µ–Ω—è –∑–æ–≤—É—Ç ScheduleBot!\n–Ø –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!")
    await message.answer("–î–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –º–Ω–æ–π, —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –ø–∞—Ä–æ–ª—é –∏ –ª–æ–≥–∏–Ω—É.", reply_markup=kb.LogInMenu)

    global users_chat_id
    users_chat_id.setdefault(message.chat.id, None)


# –ú–µ–Ω—é "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
@dp.message(F.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def send_schedule(message: Message):
    global users_chat_id

    msg = await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")
    # current_user_name = users_chat_id[message.chat.id][0]

    schedule = await users_chat_id[message.chat.id][1].schedule.week_schedule

    await msg.edit_text(schedule[0])
    del schedule[0]

    for text in schedule:
        await message.answer(text)


# –ú–µ–Ω—é "–ë–∞–ª–ª—ã –ë–†–°"
@dp.message(F.text == "üìâ –ë–∞–ª–ª—ã –ë–†–°")
async def send_rating(message: Message):
    global users_chat_id

    msg = await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")

    rating = await users_chat_id[message.chat.id][1].rating.all_disciplines_rating

    await msg.edit_text(rating)


@dp.message(F.text == "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
async def authorisation(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –æ—Ç –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞: ")


@dp.message(lambda message: "@" in message.text)
async def login(message: Message):
    global users_chat_id

    users_chat_id[message.chat.id] = message.text

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞: ")


@dp.message()
async def password(message: Message):
    global users_chat_id

    if not users_chat_id[message.chat.id]:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É: ")
        return

    if isinstance(users_chat_id[message.chat.id], tuple):
        await message.answer("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
        return

    if "@" not in users_chat_id[message.chat.id]:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É: ")
        return

    login = users_chat_id[message.chat.id]
    password = message.text

    await message.answer("–ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É...")

    try:
        users_chat_id[message.chat.id] = (login, await StudentAccount(login, password).driver)
    except IncorrectDataException:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑...", reply_markup=kb.LogInMenu)
        users_chat_id[message.chat.id] = None
    else:
        await message.answer("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!", reply_markup=kb.StartMenu)


if __name__ == "__main__":
    dp.run_polling(bot)
