from bot_config import BOT_TOKEN
from student_account import StudentAccount
from student_account.exceptions import IncorrectDataException

import keyboards as kb
from pagination_kb import create_pagination_keyboard

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery


bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

users_chat_id: dict = {}


# –ö–æ–º–∞–Ω–¥–∞ "/start"
@dp.message(CommandStart())
async def process_start_command(message: Message):
    await message.answer("‚úã –ü—Ä–∏–≤–µ—Ç,\nü§ñ –ú–µ–Ω—è –∑–æ–≤—É—Ç StudentBot.\nü¶æ –Ø –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –±–∞–ª–ª—ã –ë–†–°!")
    await message.answer("‚ö†Ô∏è –î–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –º–Ω–æ–π, —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –ø–∞—Ä–æ–ª—é –∏ –ª–æ–≥–∏–Ω—É.", reply_markup=kb.LogInMenu)

    global users_chat_id
    users_chat_id.setdefault(message.chat.id, None)


@dp.message(F.text == "Ô∏èüîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def main_menu_button(message: Message):
    await message.answer("üë£ –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!", reply_markup=kb.StartMenu)


############################## –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ##############################


@dp.message(F.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def schedule_menu(message: Message):
    await message.answer("üóì –Ø –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –∏–ª–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å.", reply_markup=kb.ScheduleMenu)


@dp.message(F.text == "üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å")
async def send_day_schedule(message: Message):
    await message.answer("üòä –ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é.")


@dp.message(F.text == "üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é")
async def send_week_schedule(message: Message):
    global users_chat_id
    global schedule
    global week_days

    await message.answer("üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")

    schedule = await users_chat_id[message.chat.id]["schedule"].week_schedule
    week_days = [i.split("\n\n")[0].strip(":") for i in schedule]
    page = users_chat_id[message.chat.id]["schedule_page"]

    if page != len(week_days) - 1 and page != 0:

        await message.answer(
            text=schedule[page],
            reply_markup=create_pagination_keyboard("backward_schedule", week_days[page], "forward_schedule")
            )

    elif page == 0:

        await message.answer(
            text=schedule[page], 
            reply_markup=create_pagination_keyboard(week_days[page], "forward_schedule")
            )
    else:

        await message.answer(
            text=schedule[page], 
            reply_markup=create_pagination_keyboard("backward_schedule", week_days[page])
            )


@dp.callback_query(F.data == "forward_schedule")
async def press_forward_schedule(callback: CallbackQuery):
    global users_chat_id
    global schedule
    global week_days

    page = users_chat_id[callback.from_user.id]["schedule_page"]

    if page + 1 < len(week_days) - 1:

        await callback.message.edit_text(
            text=schedule[page + 1],
            reply_markup=create_pagination_keyboard("backward_schedule", week_days[page + 1], "forward_schedule")
            )
    else:

        await callback.message.edit_text(
            text=schedule[page + 1],
            reply_markup=create_pagination_keyboard("backward_schedule", week_days[page + 1])
            )

    users_chat_id[callback.from_user.id]["schedule_page"] += 1

    await callback.answer()


@dp.callback_query(F.data == "backward_schedule")
async def press_backward_schedule(callback: CallbackQuery):
    global users_chat_id
    global schedule
    global week_days

    page = users_chat_id[callback.from_user.id]["schedule_page"]

    if page - 1 > 0:

        await callback.message.edit_text(
            text=schedule[page - 1],
            reply_markup=create_pagination_keyboard("backward_schedule", week_days[page - 1], "forward_schedule")
            )

    else:

        await callback.message.edit_text(
            text=schedule[page - 1],
            reply_markup=create_pagination_keyboard(week_days[page - 1], "forward_schedule")
            )

    users_chat_id[callback.from_user.id]["schedule_page"] -= 1

    await callback.answer()


############################## –ë–∞–ª–ª—ã –ë–†–° ###############################


@dp.message(F.text == "üìâ –ë–∞–ª–ª—ã –ë–†–°")
async def rating_menu(message: Message):
    await message.answer("üìù –Ø –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –≤—Å–µ –≤–∞—à–∏ –±–∞–ª–ª—ã –ë–†–° –∏–ª–∏ —Ç–æ–ª—å–∫–æ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É.", reply_markup=kb.RatingMenu)


@dp.message(F.text == "üìù –ë–∞–ª–ª—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É")
async def send_discipline_rating(message: Message):
    await message.answer("üòä –ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –∑–∞—Ç–æ –¥–≤–µ –¥—Ä—É–≥–∏–µ —Ä–∞–±–æ—Ç–∞—é—Ç.")


@dp.message(F.text == "üìï –í—Å–µ –±–∞–ª–ª—ã –∫—Ä–∞—Ç–∫–æ")
async def send_short_rating(message: Message):
    global users_chat_id

    msg = await message.answer("üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")

    rating = await users_chat_id[message.chat.id]["rating"].short_disciplines_rating

    await msg.edit_text(rating)


@dp.message(F.text == "üìö –í—Å–µ –±–∞–ª–ª—ã –ø–æ–¥—Ä–æ–±–Ω–æ")
async def send_full_rating(message: Message):
    global users_chat_id
    global rating
    global disciplines

    await message.answer("üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")

    rating = await users_chat_id[message.chat.id]["rating"].full_disciplines_rating
    # disciplines = [i.split(":\n")[0] for i in rating]
    disciplines = [str(i) for i in range(1, len(rating) + 1)]
    page = users_chat_id[message.chat.id]["rating_page"]

    if page != len(disciplines) - 1 and page != 0:

        await message.answer(
            text=rating[page],
            reply_markup=create_pagination_keyboard("backward_rating", disciplines[page], "forward_rating")
            )

    elif page == 0:

        await message.answer(
            text=rating[page], 
            reply_markup=create_pagination_keyboard(disciplines[page], "forward_rating")
            )
    else:

        await message.answer(
            text=rating[page], 
            reply_markup=create_pagination_keyboard("backward_rating", disciplines[page])
            )


@dp.callback_query(F.data == "forward_rating")
async def press_forward_rating(callback: CallbackQuery):
    global users_chat_id
    global rating
    global disciplines

    page = users_chat_id[callback.from_user.id]["rating_page"]

    if page + 1 < len(disciplines) - 1:

        await callback.message.edit_text(
            text=rating[page + 1],
            reply_markup=create_pagination_keyboard("backward_rating", disciplines[page + 1], "forward_rating")
            )
    else:

        await callback.message.edit_text(
            text=rating[page + 1],
            reply_markup=create_pagination_keyboard("backward_rating", disciplines[page + 1])
            )

    users_chat_id[callback.from_user.id]["rating_page"] += 1

    await callback.answer()


@dp.callback_query(F.data == "backward_rating")
async def press_backward_rating(callback: CallbackQuery):
    global users_chat_id
    global rating
    global disciplines

    page = users_chat_id[callback.from_user.id]["rating_page"]

    if page - 1 > 0:

        await callback.message.edit_text(
            text=rating[page - 1],
            reply_markup=create_pagination_keyboard("backward_rating", disciplines[page - 1], "forward_rating")
            )

    else:

        await callback.message.edit_text(
            text=rating[page - 1],
            reply_markup=create_pagination_keyboard(disciplines[page - 1], "forward_rating")
            )

    users_chat_id[callback.from_user.id]["rating_page"] -= 1

    await callback.answer()


@dp.message(F.text == "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
async def authorisation(message: Message):
    global users_chat_id

    if users_chat_id[message.chat.id]:
        await message.answer("‚ùóÔ∏è –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!", reply_markup=kb.StartMenu)
        return

    await message.answer("‚ñ∂Ô∏è –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –æ—Ç –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞: ")


@dp.message(F.text.contains("@"))
async def login(message: Message):
    global users_chat_id

    if users_chat_id[message.chat.id]:
        await message.answer("–ü–æ–ø—ã—Ç–∫–∞ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞...\n–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
        return

    users_chat_id[message.chat.id] = message.text

    await message.answer("‚ñ∂Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞: ")


# –°–î–ï–õ–ê–¢–¨ –ù–û–†–ú–ê–õ–¨–ù–£–Æ –ü–†–û–í–ï–†–ö–£
@dp.message()
async def password(message: Message):
    global users_chat_id

    if not users_chat_id[message.chat.id] or "@" not in users_chat_id[message.chat.id]:
        await message.answer("‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É: ")
        return

    if isinstance(users_chat_id[message.chat.id], dict):
        await message.answer("–ü–æ–ø—ã—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è...\n–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
        return

    login = users_chat_id[message.chat.id]
    password = message.text

    await message.answer("üõú –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ –≤–∞—à–µ–º—É –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É...")

    try:
        account = await StudentAccount(login, password).driver

        users_chat_id[message.chat.id] = {
            "account": account,
            "schedule": account.schedule,
            "rating": account.rating,
            "schedule_page": 0,
            "rating_page": 0
        }

    except IncorrectDataException:
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑...", reply_markup=kb.LogInMenu)
        users_chat_id[message.chat.id] = None
    else:
        await message.answer("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!", reply_markup=kb.StartMenu)


if __name__ == "__main__":
    dp.run_polling(bot)
